// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	authtypes "github.com/cosmos/cosmos-sdk/x/auth/types"
	mock "github.com/stretchr/testify/mock"

	types "github.com/cosmos/cosmos-sdk/types"
)

// FungibleAccountKeeper is an autogenerated mock type for the FungibleAccountKeeper type
type FungibleAccountKeeper struct {
	mock.Mock
}

// GetAccount provides a mock function with given fields: ctx, addr
func (_m *FungibleAccountKeeper) GetAccount(ctx types.Context, addr types.AccAddress) authtypes.AccountI {
	ret := _m.Called(ctx, addr)

	if len(ret) == 0 {
		panic("no return value specified for GetAccount")
	}

	var r0 authtypes.AccountI
	if rf, ok := ret.Get(0).(func(types.Context, types.AccAddress) authtypes.AccountI); ok {
		r0 = rf(ctx, addr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(authtypes.AccountI)
		}
	}

	return r0
}

// GetModuleAccount provides a mock function with given fields: ctx, name
func (_m *FungibleAccountKeeper) GetModuleAccount(ctx types.Context, name string) authtypes.ModuleAccountI {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetModuleAccount")
	}

	var r0 authtypes.ModuleAccountI
	if rf, ok := ret.Get(0).(func(types.Context, string) authtypes.ModuleAccountI); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(authtypes.ModuleAccountI)
		}
	}

	return r0
}

// GetSequence provides a mock function with given fields: ctx, addr
func (_m *FungibleAccountKeeper) GetSequence(ctx types.Context, addr types.AccAddress) (uint64, error) {
	ret := _m.Called(ctx, addr)

	if len(ret) == 0 {
		panic("no return value specified for GetSequence")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(types.Context, types.AccAddress) (uint64, error)); ok {
		return rf(ctx, addr)
	}
	if rf, ok := ret.Get(0).(func(types.Context, types.AccAddress) uint64); ok {
		r0 = rf(ctx, addr)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(types.Context, types.AccAddress) error); ok {
		r1 = rf(ctx, addr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HasAccount provides a mock function with given fields: ctx, addr
func (_m *FungibleAccountKeeper) HasAccount(ctx types.Context, addr types.AccAddress) bool {
	ret := _m.Called(ctx, addr)

	if len(ret) == 0 {
		panic("no return value specified for HasAccount")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(types.Context, types.AccAddress) bool); ok {
		r0 = rf(ctx, addr)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// NewAccountWithAddress provides a mock function with given fields: ctx, addr
func (_m *FungibleAccountKeeper) NewAccountWithAddress(ctx types.Context, addr types.AccAddress) authtypes.AccountI {
	ret := _m.Called(ctx, addr)

	if len(ret) == 0 {
		panic("no return value specified for NewAccountWithAddress")
	}

	var r0 authtypes.AccountI
	if rf, ok := ret.Get(0).(func(types.Context, types.AccAddress) authtypes.AccountI); ok {
		r0 = rf(ctx, addr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(authtypes.AccountI)
		}
	}

	return r0
}

// SetAccount provides a mock function with given fields: ctx, acc
func (_m *FungibleAccountKeeper) SetAccount(ctx types.Context, acc authtypes.AccountI) {
	_m.Called(ctx, acc)
}

// NewFungibleAccountKeeper creates a new instance of FungibleAccountKeeper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFungibleAccountKeeper(t interface {
	mock.TestingT
	Cleanup(func())
}) *FungibleAccountKeeper {
	mock := &FungibleAccountKeeper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
