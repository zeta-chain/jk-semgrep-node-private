// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	proofs "github.com/zeta-chain/node/pkg/proofs"

	types "github.com/cosmos/cosmos-sdk/types"
)

// ObserverLightclientKeeper is an autogenerated mock type for the ObserverLightclientKeeper type
type ObserverLightclientKeeper struct {
	mock.Mock
}

// AddBlockHeader provides a mock function with given fields: ctx, chainID, height, blockHash, header, parentHash
func (_m *ObserverLightclientKeeper) AddBlockHeader(ctx types.Context, chainID int64, height int64, blockHash []byte, header proofs.HeaderData, parentHash []byte) {
	_m.Called(ctx, chainID, height, blockHash, header, parentHash)
}

// CheckNewBlockHeader provides a mock function with given fields: ctx, chainID, blockHash, height, header
func (_m *ObserverLightclientKeeper) CheckNewBlockHeader(ctx types.Context, chainID int64, blockHash []byte, height int64, header proofs.HeaderData) ([]byte, error) {
	ret := _m.Called(ctx, chainID, blockHash, height, header)

	if len(ret) == 0 {
		panic("no return value specified for CheckNewBlockHeader")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(types.Context, int64, []byte, int64, proofs.HeaderData) ([]byte, error)); ok {
		return rf(ctx, chainID, blockHash, height, header)
	}
	if rf, ok := ret.Get(0).(func(types.Context, int64, []byte, int64, proofs.HeaderData) []byte); ok {
		r0 = rf(ctx, chainID, blockHash, height, header)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(types.Context, int64, []byte, int64, proofs.HeaderData) error); ok {
		r1 = rf(ctx, chainID, blockHash, height, header)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewObserverLightclientKeeper creates a new instance of ObserverLightclientKeeper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewObserverLightclientKeeper(t interface {
	mock.TestingT
	Cleanup(func())
}) *ObserverLightclientKeeper {
	mock := &ObserverLightclientKeeper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
