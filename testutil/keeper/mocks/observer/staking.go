// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	stakingtypes "github.com/cosmos/cosmos-sdk/x/staking/types"

	types "github.com/cosmos/cosmos-sdk/types"
)

// ObserverStakingKeeper is an autogenerated mock type for the ObserverStakingKeeper type
type ObserverStakingKeeper struct {
	mock.Mock
}

// GetDelegation provides a mock function with given fields: ctx, delAddr, valAddr
func (_m *ObserverStakingKeeper) GetDelegation(ctx types.Context, delAddr types.AccAddress, valAddr types.ValAddress) (stakingtypes.Delegation, bool) {
	ret := _m.Called(ctx, delAddr, valAddr)

	if len(ret) == 0 {
		panic("no return value specified for GetDelegation")
	}

	var r0 stakingtypes.Delegation
	var r1 bool
	if rf, ok := ret.Get(0).(func(types.Context, types.AccAddress, types.ValAddress) (stakingtypes.Delegation, bool)); ok {
		return rf(ctx, delAddr, valAddr)
	}
	if rf, ok := ret.Get(0).(func(types.Context, types.AccAddress, types.ValAddress) stakingtypes.Delegation); ok {
		r0 = rf(ctx, delAddr, valAddr)
	} else {
		r0 = ret.Get(0).(stakingtypes.Delegation)
	}

	if rf, ok := ret.Get(1).(func(types.Context, types.AccAddress, types.ValAddress) bool); ok {
		r1 = rf(ctx, delAddr, valAddr)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// GetValidator provides a mock function with given fields: ctx, addr
func (_m *ObserverStakingKeeper) GetValidator(ctx types.Context, addr types.ValAddress) (stakingtypes.Validator, bool) {
	ret := _m.Called(ctx, addr)

	if len(ret) == 0 {
		panic("no return value specified for GetValidator")
	}

	var r0 stakingtypes.Validator
	var r1 bool
	if rf, ok := ret.Get(0).(func(types.Context, types.ValAddress) (stakingtypes.Validator, bool)); ok {
		return rf(ctx, addr)
	}
	if rf, ok := ret.Get(0).(func(types.Context, types.ValAddress) stakingtypes.Validator); ok {
		r0 = rf(ctx, addr)
	} else {
		r0 = ret.Get(0).(stakingtypes.Validator)
	}

	if rf, ok := ret.Get(1).(func(types.Context, types.ValAddress) bool); ok {
		r1 = rf(ctx, addr)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// SetValidator provides a mock function with given fields: ctx, validator
func (_m *ObserverStakingKeeper) SetValidator(ctx types.Context, validator stakingtypes.Validator) {
	_m.Called(ctx, validator)
}

// NewObserverStakingKeeper creates a new instance of ObserverStakingKeeper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewObserverStakingKeeper(t interface {
	mock.TestingT
	Cleanup(func())
}) *ObserverStakingKeeper {
	mock := &ObserverStakingKeeper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
