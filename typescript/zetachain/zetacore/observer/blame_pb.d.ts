// @generated by protoc-gen-es v1.3.0 with parameter "target=dts"
// @generated from file zetachain/zetacore/observer/blame.proto (package zetachain.zetacore.observer, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message zetachain.zetacore.observer.Node
 */
export declare class Node extends Message<Node> {
  /**
   * @generated from field: string pub_key = 1;
   */
  pubKey: string;

  /**
   * @generated from field: bytes blame_data = 2;
   */
  blameData: Uint8Array;

  /**
   * @generated from field: bytes blame_signature = 3;
   */
  blameSignature: Uint8Array;

  constructor(data?: PartialMessage<Node>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "zetachain.zetacore.observer.Node";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Node;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Node;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Node;

  static equals(a: Node | PlainMessage<Node> | undefined, b: Node | PlainMessage<Node> | undefined): boolean;
}

/**
 * @generated from message zetachain.zetacore.observer.Blame
 */
export declare class Blame extends Message<Blame> {
  /**
   * @generated from field: string index = 1;
   */
  index: string;

  /**
   * @generated from field: string failure_reason = 2;
   */
  failureReason: string;

  /**
   * @generated from field: repeated zetachain.zetacore.observer.Node nodes = 3;
   */
  nodes: Node[];

  constructor(data?: PartialMessage<Blame>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "zetachain.zetacore.observer.Blame";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Blame;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Blame;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Blame;

  static equals(a: Blame | PlainMessage<Blame> | undefined, b: Blame | PlainMessage<Blame> | undefined): boolean;
}

