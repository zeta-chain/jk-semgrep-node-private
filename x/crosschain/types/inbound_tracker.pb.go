// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: zetachain/zetacore/crosschain/inbound_tracker.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	coin "github.com/zeta-chain/node/pkg/coin"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type InboundTracker struct {
	ChainId  int64         `protobuf:"varint,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	TxHash   string        `protobuf:"bytes,2,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	CoinType coin.CoinType `protobuf:"varint,3,opt,name=coin_type,json=coinType,proto3,enum=zetachain.zetacore.pkg.coin.CoinType" json:"coin_type,omitempty"`
}

func (m *InboundTracker) Reset()         { *m = InboundTracker{} }
func (m *InboundTracker) String() string { return proto.CompactTextString(m) }
func (*InboundTracker) ProtoMessage()    {}
func (*InboundTracker) Descriptor() ([]byte, []int) {
	return fileDescriptor_0795834bbbbe2970, []int{0}
}
func (m *InboundTracker) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InboundTracker) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InboundTracker.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InboundTracker) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InboundTracker.Merge(m, src)
}
func (m *InboundTracker) XXX_Size() int {
	return m.Size()
}
func (m *InboundTracker) XXX_DiscardUnknown() {
	xxx_messageInfo_InboundTracker.DiscardUnknown(m)
}

var xxx_messageInfo_InboundTracker proto.InternalMessageInfo

func (m *InboundTracker) GetChainId() int64 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *InboundTracker) GetTxHash() string {
	if m != nil {
		return m.TxHash
	}
	return ""
}

func (m *InboundTracker) GetCoinType() coin.CoinType {
	if m != nil {
		return m.CoinType
	}
	return coin.CoinType_Zeta
}

func init() {
	proto.RegisterType((*InboundTracker)(nil), "zetachain.zetacore.crosschain.InboundTracker")
}

func init() {
	proto.RegisterFile("zetachain/zetacore/crosschain/inbound_tracker.proto", fileDescriptor_0795834bbbbe2970)
}

var fileDescriptor_0795834bbbbe2970 = []byte{
	// 256 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x32, 0xae, 0x4a, 0x2d, 0x49,
	0x4c, 0xce, 0x48, 0xcc, 0xcc, 0xd3, 0x07, 0xb3, 0xf2, 0x8b, 0x52, 0xf5, 0x93, 0x8b, 0xf2, 0x8b,
	0x8b, 0x21, 0x62, 0x99, 0x79, 0x49, 0xf9, 0xa5, 0x79, 0x29, 0xf1, 0x25, 0x45, 0x89, 0xc9, 0xd9,
	0xa9, 0x45, 0x7a, 0x05, 0x45, 0xf9, 0x25, 0xf9, 0x42, 0xb2, 0x70, 0x4d, 0x7a, 0x30, 0x4d, 0x7a,
	0x08, 0x4d, 0x52, 0x6a, 0x58, 0xcc, 0x2c, 0xc8, 0x4e, 0xd7, 0x4f, 0xce, 0xcf, 0xcc, 0x03, 0x13,
	0x10, 0x63, 0x94, 0x3a, 0x18, 0xb9, 0xf8, 0x3c, 0x21, 0x16, 0x84, 0x40, 0xcc, 0x17, 0x92, 0xe4,
	0xe2, 0x00, 0x6b, 0x8c, 0xcf, 0x4c, 0x91, 0x60, 0x54, 0x60, 0xd4, 0x60, 0x0e, 0x62, 0x07, 0xf3,
	0x3d, 0x53, 0x84, 0xc4, 0xb9, 0xd8, 0x4b, 0x2a, 0xe2, 0x33, 0x12, 0x8b, 0x33, 0x24, 0x98, 0x14,
	0x18, 0x35, 0x38, 0x83, 0xd8, 0x4a, 0x2a, 0x3c, 0x12, 0x8b, 0x33, 0x84, 0x9c, 0xb8, 0x38, 0x41,
	0x86, 0xc6, 0x97, 0x54, 0x16, 0xa4, 0x4a, 0x30, 0x2b, 0x30, 0x6a, 0xf0, 0x19, 0xa9, 0xea, 0x61,
	0x71, 0x61, 0x41, 0x76, 0xba, 0x1e, 0xd8, 0x76, 0xe7, 0xfc, 0xcc, 0xbc, 0x90, 0xca, 0x82, 0xd4,
	0x20, 0x8e, 0x64, 0x28, 0xcb, 0xc9, 0xfd, 0xc4, 0x23, 0x39, 0xc6, 0x0b, 0x8f, 0xe4, 0x18, 0x1f,
	0x3c, 0x92, 0x63, 0x9c, 0xf0, 0x58, 0x8e, 0xe1, 0xc2, 0x63, 0x39, 0x86, 0x1b, 0x8f, 0xe5, 0x18,
	0xa2, 0x74, 0xd3, 0x33, 0x4b, 0x32, 0x4a, 0x93, 0xf4, 0x92, 0xf3, 0x73, 0xc1, 0xbe, 0xd1, 0x85,
	0x78, 0x2c, 0x2f, 0x3f, 0x25, 0x55, 0xbf, 0x02, 0x39, 0xa8, 0x40, 0xd6, 0x17, 0x27, 0xb1, 0x81,
	0xbd, 0x66, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0xa2, 0x06, 0x06, 0x39, 0x58, 0x01, 0x00, 0x00,
}

func (m *InboundTracker) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InboundTracker) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InboundTracker) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CoinType != 0 {
		i = encodeVarintInboundTracker(dAtA, i, uint64(m.CoinType))
		i--
		dAtA[i] = 0x18
	}
	if len(m.TxHash) > 0 {
		i -= len(m.TxHash)
		copy(dAtA[i:], m.TxHash)
		i = encodeVarintInboundTracker(dAtA, i, uint64(len(m.TxHash)))
		i--
		dAtA[i] = 0x12
	}
	if m.ChainId != 0 {
		i = encodeVarintInboundTracker(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintInboundTracker(dAtA []byte, offset int, v uint64) int {
	offset -= sovInboundTracker(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *InboundTracker) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainId != 0 {
		n += 1 + sovInboundTracker(uint64(m.ChainId))
	}
	l = len(m.TxHash)
	if l > 0 {
		n += 1 + l + sovInboundTracker(uint64(l))
	}
	if m.CoinType != 0 {
		n += 1 + sovInboundTracker(uint64(m.CoinType))
	}
	return n
}

func sovInboundTracker(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozInboundTracker(x uint64) (n int) {
	return sovInboundTracker(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *InboundTracker) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInboundTracker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InboundTracker: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InboundTracker: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInboundTracker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInboundTracker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInboundTracker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInboundTracker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinType", wireType)
			}
			m.CoinType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInboundTracker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CoinType |= coin.CoinType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInboundTracker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInboundTracker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipInboundTracker(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowInboundTracker
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInboundTracker
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInboundTracker
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthInboundTracker
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupInboundTracker
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthInboundTracker
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthInboundTracker        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowInboundTracker          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupInboundTracker = fmt.Errorf("proto: unexpected end of group")
)
