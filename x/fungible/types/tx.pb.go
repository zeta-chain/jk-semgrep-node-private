// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: zetachain/zetacore/fungible/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	coin "github.com/zeta-chain/node/pkg/coin"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgDeploySystemContracts struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *MsgDeploySystemContracts) Reset()         { *m = MsgDeploySystemContracts{} }
func (m *MsgDeploySystemContracts) String() string { return proto.CompactTextString(m) }
func (*MsgDeploySystemContracts) ProtoMessage()    {}
func (*MsgDeploySystemContracts) Descriptor() ([]byte, []int) {
	return fileDescriptor_7bea9688d1d01113, []int{0}
}
func (m *MsgDeploySystemContracts) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeploySystemContracts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeploySystemContracts.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeploySystemContracts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeploySystemContracts.Merge(m, src)
}
func (m *MsgDeploySystemContracts) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeploySystemContracts) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeploySystemContracts.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeploySystemContracts proto.InternalMessageInfo

func (m *MsgDeploySystemContracts) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

type MsgDeploySystemContractsResponse struct {
	UniswapV2Factory string `protobuf:"bytes,1,opt,name=uniswapV2Factory,proto3" json:"uniswapV2Factory,omitempty"`
	Wzeta            string `protobuf:"bytes,2,opt,name=wzeta,proto3" json:"wzeta,omitempty"`
	UniswapV2Router  string `protobuf:"bytes,3,opt,name=uniswapV2Router,proto3" json:"uniswapV2Router,omitempty"`
	ConnectorZEVM    string `protobuf:"bytes,4,opt,name=connectorZEVM,proto3" json:"connectorZEVM,omitempty"`
	SystemContract   string `protobuf:"bytes,5,opt,name=systemContract,proto3" json:"systemContract,omitempty"`
}

func (m *MsgDeploySystemContractsResponse) Reset()         { *m = MsgDeploySystemContractsResponse{} }
func (m *MsgDeploySystemContractsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDeploySystemContractsResponse) ProtoMessage()    {}
func (*MsgDeploySystemContractsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7bea9688d1d01113, []int{1}
}
func (m *MsgDeploySystemContractsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeploySystemContractsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeploySystemContractsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeploySystemContractsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeploySystemContractsResponse.Merge(m, src)
}
func (m *MsgDeploySystemContractsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeploySystemContractsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeploySystemContractsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeploySystemContractsResponse proto.InternalMessageInfo

func (m *MsgDeploySystemContractsResponse) GetUniswapV2Factory() string {
	if m != nil {
		return m.UniswapV2Factory
	}
	return ""
}

func (m *MsgDeploySystemContractsResponse) GetWzeta() string {
	if m != nil {
		return m.Wzeta
	}
	return ""
}

func (m *MsgDeploySystemContractsResponse) GetUniswapV2Router() string {
	if m != nil {
		return m.UniswapV2Router
	}
	return ""
}

func (m *MsgDeploySystemContractsResponse) GetConnectorZEVM() string {
	if m != nil {
		return m.ConnectorZEVM
	}
	return ""
}

func (m *MsgDeploySystemContractsResponse) GetSystemContract() string {
	if m != nil {
		return m.SystemContract
	}
	return ""
}

type MsgUpdateZRC20WithdrawFee struct {
	Creator        string                                  `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Zrc20Address   string                                  `protobuf:"bytes,2,opt,name=zrc20_address,json=zrc20Address,proto3" json:"zrc20_address,omitempty"`
	NewWithdrawFee github_com_cosmos_cosmos_sdk_types.Uint `protobuf:"bytes,6,opt,name=new_withdraw_fee,json=newWithdrawFee,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Uint" json:"new_withdraw_fee"`
	NewGasLimit    github_com_cosmos_cosmos_sdk_types.Uint `protobuf:"bytes,7,opt,name=new_gas_limit,json=newGasLimit,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Uint" json:"new_gas_limit"`
}

func (m *MsgUpdateZRC20WithdrawFee) Reset()         { *m = MsgUpdateZRC20WithdrawFee{} }
func (m *MsgUpdateZRC20WithdrawFee) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateZRC20WithdrawFee) ProtoMessage()    {}
func (*MsgUpdateZRC20WithdrawFee) Descriptor() ([]byte, []int) {
	return fileDescriptor_7bea9688d1d01113, []int{2}
}
func (m *MsgUpdateZRC20WithdrawFee) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateZRC20WithdrawFee) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateZRC20WithdrawFee.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateZRC20WithdrawFee) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateZRC20WithdrawFee.Merge(m, src)
}
func (m *MsgUpdateZRC20WithdrawFee) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateZRC20WithdrawFee) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateZRC20WithdrawFee.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateZRC20WithdrawFee proto.InternalMessageInfo

func (m *MsgUpdateZRC20WithdrawFee) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgUpdateZRC20WithdrawFee) GetZrc20Address() string {
	if m != nil {
		return m.Zrc20Address
	}
	return ""
}

type MsgUpdateZRC20WithdrawFeeResponse struct {
}

func (m *MsgUpdateZRC20WithdrawFeeResponse) Reset()         { *m = MsgUpdateZRC20WithdrawFeeResponse{} }
func (m *MsgUpdateZRC20WithdrawFeeResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateZRC20WithdrawFeeResponse) ProtoMessage()    {}
func (*MsgUpdateZRC20WithdrawFeeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7bea9688d1d01113, []int{3}
}
func (m *MsgUpdateZRC20WithdrawFeeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateZRC20WithdrawFeeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateZRC20WithdrawFeeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateZRC20WithdrawFeeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateZRC20WithdrawFeeResponse.Merge(m, src)
}
func (m *MsgUpdateZRC20WithdrawFeeResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateZRC20WithdrawFeeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateZRC20WithdrawFeeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateZRC20WithdrawFeeResponse proto.InternalMessageInfo

type MsgUpdateSystemContract struct {
	Creator                  string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	NewSystemContractAddress string `protobuf:"bytes,2,opt,name=new_system_contract_address,json=newSystemContractAddress,proto3" json:"new_system_contract_address,omitempty"`
}

func (m *MsgUpdateSystemContract) Reset()         { *m = MsgUpdateSystemContract{} }
func (m *MsgUpdateSystemContract) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateSystemContract) ProtoMessage()    {}
func (*MsgUpdateSystemContract) Descriptor() ([]byte, []int) {
	return fileDescriptor_7bea9688d1d01113, []int{4}
}
func (m *MsgUpdateSystemContract) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateSystemContract) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateSystemContract.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateSystemContract) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateSystemContract.Merge(m, src)
}
func (m *MsgUpdateSystemContract) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateSystemContract) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateSystemContract.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateSystemContract proto.InternalMessageInfo

func (m *MsgUpdateSystemContract) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgUpdateSystemContract) GetNewSystemContractAddress() string {
	if m != nil {
		return m.NewSystemContractAddress
	}
	return ""
}

type MsgUpdateSystemContractResponse struct {
}

func (m *MsgUpdateSystemContractResponse) Reset()         { *m = MsgUpdateSystemContractResponse{} }
func (m *MsgUpdateSystemContractResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateSystemContractResponse) ProtoMessage()    {}
func (*MsgUpdateSystemContractResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7bea9688d1d01113, []int{5}
}
func (m *MsgUpdateSystemContractResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateSystemContractResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateSystemContractResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateSystemContractResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateSystemContractResponse.Merge(m, src)
}
func (m *MsgUpdateSystemContractResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateSystemContractResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateSystemContractResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateSystemContractResponse proto.InternalMessageInfo

type MsgDeployFungibleCoinZRC20 struct {
	Creator        string        `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	ERC20          string        `protobuf:"bytes,2,opt,name=ERC20,proto3" json:"ERC20,omitempty"`
	ForeignChainId int64         `protobuf:"varint,3,opt,name=foreign_chain_id,json=foreignChainId,proto3" json:"foreign_chain_id,omitempty"`
	Decimals       uint32        `protobuf:"varint,4,opt,name=decimals,proto3" json:"decimals,omitempty"`
	Name           string        `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Symbol         string        `protobuf:"bytes,6,opt,name=symbol,proto3" json:"symbol,omitempty"`
	CoinType       coin.CoinType `protobuf:"varint,7,opt,name=coin_type,json=coinType,proto3,enum=zetachain.zetacore.pkg.coin.CoinType" json:"coin_type,omitempty"`
	GasLimit       int64         `protobuf:"varint,8,opt,name=gas_limit,json=gasLimit,proto3" json:"gas_limit,omitempty"`
}

func (m *MsgDeployFungibleCoinZRC20) Reset()         { *m = MsgDeployFungibleCoinZRC20{} }
func (m *MsgDeployFungibleCoinZRC20) String() string { return proto.CompactTextString(m) }
func (*MsgDeployFungibleCoinZRC20) ProtoMessage()    {}
func (*MsgDeployFungibleCoinZRC20) Descriptor() ([]byte, []int) {
	return fileDescriptor_7bea9688d1d01113, []int{6}
}
func (m *MsgDeployFungibleCoinZRC20) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeployFungibleCoinZRC20) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeployFungibleCoinZRC20.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeployFungibleCoinZRC20) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeployFungibleCoinZRC20.Merge(m, src)
}
func (m *MsgDeployFungibleCoinZRC20) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeployFungibleCoinZRC20) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeployFungibleCoinZRC20.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeployFungibleCoinZRC20 proto.InternalMessageInfo

func (m *MsgDeployFungibleCoinZRC20) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgDeployFungibleCoinZRC20) GetERC20() string {
	if m != nil {
		return m.ERC20
	}
	return ""
}

func (m *MsgDeployFungibleCoinZRC20) GetForeignChainId() int64 {
	if m != nil {
		return m.ForeignChainId
	}
	return 0
}

func (m *MsgDeployFungibleCoinZRC20) GetDecimals() uint32 {
	if m != nil {
		return m.Decimals
	}
	return 0
}

func (m *MsgDeployFungibleCoinZRC20) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MsgDeployFungibleCoinZRC20) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *MsgDeployFungibleCoinZRC20) GetCoinType() coin.CoinType {
	if m != nil {
		return m.CoinType
	}
	return coin.CoinType_Zeta
}

func (m *MsgDeployFungibleCoinZRC20) GetGasLimit() int64 {
	if m != nil {
		return m.GasLimit
	}
	return 0
}

type MsgDeployFungibleCoinZRC20Response struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *MsgDeployFungibleCoinZRC20Response) Reset()         { *m = MsgDeployFungibleCoinZRC20Response{} }
func (m *MsgDeployFungibleCoinZRC20Response) String() string { return proto.CompactTextString(m) }
func (*MsgDeployFungibleCoinZRC20Response) ProtoMessage()    {}
func (*MsgDeployFungibleCoinZRC20Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_7bea9688d1d01113, []int{7}
}
func (m *MsgDeployFungibleCoinZRC20Response) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeployFungibleCoinZRC20Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeployFungibleCoinZRC20Response.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeployFungibleCoinZRC20Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeployFungibleCoinZRC20Response.Merge(m, src)
}
func (m *MsgDeployFungibleCoinZRC20Response) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeployFungibleCoinZRC20Response) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeployFungibleCoinZRC20Response.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeployFungibleCoinZRC20Response proto.InternalMessageInfo

func (m *MsgDeployFungibleCoinZRC20Response) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type MsgRemoveForeignCoin struct {
	Creator      string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Zrc20Address string `protobuf:"bytes,2,opt,name=zrc20_address,json=zrc20Address,proto3" json:"zrc20_address,omitempty"`
}

func (m *MsgRemoveForeignCoin) Reset()         { *m = MsgRemoveForeignCoin{} }
func (m *MsgRemoveForeignCoin) String() string { return proto.CompactTextString(m) }
func (*MsgRemoveForeignCoin) ProtoMessage()    {}
func (*MsgRemoveForeignCoin) Descriptor() ([]byte, []int) {
	return fileDescriptor_7bea9688d1d01113, []int{8}
}
func (m *MsgRemoveForeignCoin) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRemoveForeignCoin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRemoveForeignCoin.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRemoveForeignCoin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRemoveForeignCoin.Merge(m, src)
}
func (m *MsgRemoveForeignCoin) XXX_Size() int {
	return m.Size()
}
func (m *MsgRemoveForeignCoin) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRemoveForeignCoin.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRemoveForeignCoin proto.InternalMessageInfo

func (m *MsgRemoveForeignCoin) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgRemoveForeignCoin) GetZrc20Address() string {
	if m != nil {
		return m.Zrc20Address
	}
	return ""
}

type MsgRemoveForeignCoinResponse struct {
}

func (m *MsgRemoveForeignCoinResponse) Reset()         { *m = MsgRemoveForeignCoinResponse{} }
func (m *MsgRemoveForeignCoinResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRemoveForeignCoinResponse) ProtoMessage()    {}
func (*MsgRemoveForeignCoinResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7bea9688d1d01113, []int{9}
}
func (m *MsgRemoveForeignCoinResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRemoveForeignCoinResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRemoveForeignCoinResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRemoveForeignCoinResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRemoveForeignCoinResponse.Merge(m, src)
}
func (m *MsgRemoveForeignCoinResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRemoveForeignCoinResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRemoveForeignCoinResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRemoveForeignCoinResponse proto.InternalMessageInfo

type MsgUpdateContractBytecode struct {
	Creator         string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	ContractAddress string `protobuf:"bytes,2,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	NewCodeHash     string `protobuf:"bytes,3,opt,name=new_code_hash,json=newCodeHash,proto3" json:"new_code_hash,omitempty"`
}

func (m *MsgUpdateContractBytecode) Reset()         { *m = MsgUpdateContractBytecode{} }
func (m *MsgUpdateContractBytecode) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateContractBytecode) ProtoMessage()    {}
func (*MsgUpdateContractBytecode) Descriptor() ([]byte, []int) {
	return fileDescriptor_7bea9688d1d01113, []int{10}
}
func (m *MsgUpdateContractBytecode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateContractBytecode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateContractBytecode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateContractBytecode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateContractBytecode.Merge(m, src)
}
func (m *MsgUpdateContractBytecode) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateContractBytecode) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateContractBytecode.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateContractBytecode proto.InternalMessageInfo

func (m *MsgUpdateContractBytecode) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgUpdateContractBytecode) GetContractAddress() string {
	if m != nil {
		return m.ContractAddress
	}
	return ""
}

func (m *MsgUpdateContractBytecode) GetNewCodeHash() string {
	if m != nil {
		return m.NewCodeHash
	}
	return ""
}

type MsgUpdateContractBytecodeResponse struct {
}

func (m *MsgUpdateContractBytecodeResponse) Reset()         { *m = MsgUpdateContractBytecodeResponse{} }
func (m *MsgUpdateContractBytecodeResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateContractBytecodeResponse) ProtoMessage()    {}
func (*MsgUpdateContractBytecodeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7bea9688d1d01113, []int{11}
}
func (m *MsgUpdateContractBytecodeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateContractBytecodeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateContractBytecodeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateContractBytecodeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateContractBytecodeResponse.Merge(m, src)
}
func (m *MsgUpdateContractBytecodeResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateContractBytecodeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateContractBytecodeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateContractBytecodeResponse proto.InternalMessageInfo

type MsgUpdateZRC20LiquidityCap struct {
	Creator      string                                  `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Zrc20Address string                                  `protobuf:"bytes,2,opt,name=zrc20_address,json=zrc20Address,proto3" json:"zrc20_address,omitempty"`
	LiquidityCap github_com_cosmos_cosmos_sdk_types.Uint `protobuf:"bytes,3,opt,name=liquidity_cap,json=liquidityCap,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Uint" json:"liquidity_cap"`
}

func (m *MsgUpdateZRC20LiquidityCap) Reset()         { *m = MsgUpdateZRC20LiquidityCap{} }
func (m *MsgUpdateZRC20LiquidityCap) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateZRC20LiquidityCap) ProtoMessage()    {}
func (*MsgUpdateZRC20LiquidityCap) Descriptor() ([]byte, []int) {
	return fileDescriptor_7bea9688d1d01113, []int{12}
}
func (m *MsgUpdateZRC20LiquidityCap) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateZRC20LiquidityCap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateZRC20LiquidityCap.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateZRC20LiquidityCap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateZRC20LiquidityCap.Merge(m, src)
}
func (m *MsgUpdateZRC20LiquidityCap) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateZRC20LiquidityCap) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateZRC20LiquidityCap.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateZRC20LiquidityCap proto.InternalMessageInfo

func (m *MsgUpdateZRC20LiquidityCap) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgUpdateZRC20LiquidityCap) GetZrc20Address() string {
	if m != nil {
		return m.Zrc20Address
	}
	return ""
}

type MsgUpdateZRC20LiquidityCapResponse struct {
}

func (m *MsgUpdateZRC20LiquidityCapResponse) Reset()         { *m = MsgUpdateZRC20LiquidityCapResponse{} }
func (m *MsgUpdateZRC20LiquidityCapResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateZRC20LiquidityCapResponse) ProtoMessage()    {}
func (*MsgUpdateZRC20LiquidityCapResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7bea9688d1d01113, []int{13}
}
func (m *MsgUpdateZRC20LiquidityCapResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateZRC20LiquidityCapResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateZRC20LiquidityCapResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateZRC20LiquidityCapResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateZRC20LiquidityCapResponse.Merge(m, src)
}
func (m *MsgUpdateZRC20LiquidityCapResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateZRC20LiquidityCapResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateZRC20LiquidityCapResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateZRC20LiquidityCapResponse proto.InternalMessageInfo

type MsgPauseZRC20 struct {
	Creator        string   `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Zrc20Addresses []string `protobuf:"bytes,2,rep,name=zrc20_addresses,json=zrc20Addresses,proto3" json:"zrc20_addresses,omitempty"`
}

func (m *MsgPauseZRC20) Reset()         { *m = MsgPauseZRC20{} }
func (m *MsgPauseZRC20) String() string { return proto.CompactTextString(m) }
func (*MsgPauseZRC20) ProtoMessage()    {}
func (*MsgPauseZRC20) Descriptor() ([]byte, []int) {
	return fileDescriptor_7bea9688d1d01113, []int{14}
}
func (m *MsgPauseZRC20) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPauseZRC20) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPauseZRC20.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPauseZRC20) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPauseZRC20.Merge(m, src)
}
func (m *MsgPauseZRC20) XXX_Size() int {
	return m.Size()
}
func (m *MsgPauseZRC20) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPauseZRC20.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPauseZRC20 proto.InternalMessageInfo

func (m *MsgPauseZRC20) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgPauseZRC20) GetZrc20Addresses() []string {
	if m != nil {
		return m.Zrc20Addresses
	}
	return nil
}

type MsgPauseZRC20Response struct {
}

func (m *MsgPauseZRC20Response) Reset()         { *m = MsgPauseZRC20Response{} }
func (m *MsgPauseZRC20Response) String() string { return proto.CompactTextString(m) }
func (*MsgPauseZRC20Response) ProtoMessage()    {}
func (*MsgPauseZRC20Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_7bea9688d1d01113, []int{15}
}
func (m *MsgPauseZRC20Response) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPauseZRC20Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPauseZRC20Response.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPauseZRC20Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPauseZRC20Response.Merge(m, src)
}
func (m *MsgPauseZRC20Response) XXX_Size() int {
	return m.Size()
}
func (m *MsgPauseZRC20Response) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPauseZRC20Response.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPauseZRC20Response proto.InternalMessageInfo

type MsgUnpauseZRC20 struct {
	Creator        string   `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Zrc20Addresses []string `protobuf:"bytes,2,rep,name=zrc20_addresses,json=zrc20Addresses,proto3" json:"zrc20_addresses,omitempty"`
}

func (m *MsgUnpauseZRC20) Reset()         { *m = MsgUnpauseZRC20{} }
func (m *MsgUnpauseZRC20) String() string { return proto.CompactTextString(m) }
func (*MsgUnpauseZRC20) ProtoMessage()    {}
func (*MsgUnpauseZRC20) Descriptor() ([]byte, []int) {
	return fileDescriptor_7bea9688d1d01113, []int{16}
}
func (m *MsgUnpauseZRC20) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUnpauseZRC20) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUnpauseZRC20.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUnpauseZRC20) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUnpauseZRC20.Merge(m, src)
}
func (m *MsgUnpauseZRC20) XXX_Size() int {
	return m.Size()
}
func (m *MsgUnpauseZRC20) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUnpauseZRC20.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUnpauseZRC20 proto.InternalMessageInfo

func (m *MsgUnpauseZRC20) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgUnpauseZRC20) GetZrc20Addresses() []string {
	if m != nil {
		return m.Zrc20Addresses
	}
	return nil
}

type MsgUnpauseZRC20Response struct {
}

func (m *MsgUnpauseZRC20Response) Reset()         { *m = MsgUnpauseZRC20Response{} }
func (m *MsgUnpauseZRC20Response) String() string { return proto.CompactTextString(m) }
func (*MsgUnpauseZRC20Response) ProtoMessage()    {}
func (*MsgUnpauseZRC20Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_7bea9688d1d01113, []int{17}
}
func (m *MsgUnpauseZRC20Response) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUnpauseZRC20Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUnpauseZRC20Response.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUnpauseZRC20Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUnpauseZRC20Response.Merge(m, src)
}
func (m *MsgUnpauseZRC20Response) XXX_Size() int {
	return m.Size()
}
func (m *MsgUnpauseZRC20Response) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUnpauseZRC20Response.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUnpauseZRC20Response proto.InternalMessageInfo

type MsgUpdateGatewayContract struct {
	Creator                   string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	NewGatewayContractAddress string `protobuf:"bytes,2,opt,name=new_gateway_contract_address,json=newGatewayContractAddress,proto3" json:"new_gateway_contract_address,omitempty"`
}

func (m *MsgUpdateGatewayContract) Reset()         { *m = MsgUpdateGatewayContract{} }
func (m *MsgUpdateGatewayContract) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateGatewayContract) ProtoMessage()    {}
func (*MsgUpdateGatewayContract) Descriptor() ([]byte, []int) {
	return fileDescriptor_7bea9688d1d01113, []int{18}
}
func (m *MsgUpdateGatewayContract) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateGatewayContract) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateGatewayContract.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateGatewayContract) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateGatewayContract.Merge(m, src)
}
func (m *MsgUpdateGatewayContract) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateGatewayContract) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateGatewayContract.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateGatewayContract proto.InternalMessageInfo

func (m *MsgUpdateGatewayContract) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgUpdateGatewayContract) GetNewGatewayContractAddress() string {
	if m != nil {
		return m.NewGatewayContractAddress
	}
	return ""
}

type MsgUpdateGatewayContractResponse struct {
}

func (m *MsgUpdateGatewayContractResponse) Reset()         { *m = MsgUpdateGatewayContractResponse{} }
func (m *MsgUpdateGatewayContractResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateGatewayContractResponse) ProtoMessage()    {}
func (*MsgUpdateGatewayContractResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7bea9688d1d01113, []int{19}
}
func (m *MsgUpdateGatewayContractResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateGatewayContractResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateGatewayContractResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateGatewayContractResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateGatewayContractResponse.Merge(m, src)
}
func (m *MsgUpdateGatewayContractResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateGatewayContractResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateGatewayContractResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateGatewayContractResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgDeploySystemContracts)(nil), "zetachain.zetacore.fungible.MsgDeploySystemContracts")
	proto.RegisterType((*MsgDeploySystemContractsResponse)(nil), "zetachain.zetacore.fungible.MsgDeploySystemContractsResponse")
	proto.RegisterType((*MsgUpdateZRC20WithdrawFee)(nil), "zetachain.zetacore.fungible.MsgUpdateZRC20WithdrawFee")
	proto.RegisterType((*MsgUpdateZRC20WithdrawFeeResponse)(nil), "zetachain.zetacore.fungible.MsgUpdateZRC20WithdrawFeeResponse")
	proto.RegisterType((*MsgUpdateSystemContract)(nil), "zetachain.zetacore.fungible.MsgUpdateSystemContract")
	proto.RegisterType((*MsgUpdateSystemContractResponse)(nil), "zetachain.zetacore.fungible.MsgUpdateSystemContractResponse")
	proto.RegisterType((*MsgDeployFungibleCoinZRC20)(nil), "zetachain.zetacore.fungible.MsgDeployFungibleCoinZRC20")
	proto.RegisterType((*MsgDeployFungibleCoinZRC20Response)(nil), "zetachain.zetacore.fungible.MsgDeployFungibleCoinZRC20Response")
	proto.RegisterType((*MsgRemoveForeignCoin)(nil), "zetachain.zetacore.fungible.MsgRemoveForeignCoin")
	proto.RegisterType((*MsgRemoveForeignCoinResponse)(nil), "zetachain.zetacore.fungible.MsgRemoveForeignCoinResponse")
	proto.RegisterType((*MsgUpdateContractBytecode)(nil), "zetachain.zetacore.fungible.MsgUpdateContractBytecode")
	proto.RegisterType((*MsgUpdateContractBytecodeResponse)(nil), "zetachain.zetacore.fungible.MsgUpdateContractBytecodeResponse")
	proto.RegisterType((*MsgUpdateZRC20LiquidityCap)(nil), "zetachain.zetacore.fungible.MsgUpdateZRC20LiquidityCap")
	proto.RegisterType((*MsgUpdateZRC20LiquidityCapResponse)(nil), "zetachain.zetacore.fungible.MsgUpdateZRC20LiquidityCapResponse")
	proto.RegisterType((*MsgPauseZRC20)(nil), "zetachain.zetacore.fungible.MsgPauseZRC20")
	proto.RegisterType((*MsgPauseZRC20Response)(nil), "zetachain.zetacore.fungible.MsgPauseZRC20Response")
	proto.RegisterType((*MsgUnpauseZRC20)(nil), "zetachain.zetacore.fungible.MsgUnpauseZRC20")
	proto.RegisterType((*MsgUnpauseZRC20Response)(nil), "zetachain.zetacore.fungible.MsgUnpauseZRC20Response")
	proto.RegisterType((*MsgUpdateGatewayContract)(nil), "zetachain.zetacore.fungible.MsgUpdateGatewayContract")
	proto.RegisterType((*MsgUpdateGatewayContractResponse)(nil), "zetachain.zetacore.fungible.MsgUpdateGatewayContractResponse")
}

func init() {
	proto.RegisterFile("zetachain/zetacore/fungible/tx.proto", fileDescriptor_7bea9688d1d01113)
}

var fileDescriptor_7bea9688d1d01113 = []byte{
	// 1052 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x57, 0xcd, 0x6e, 0xdb, 0x46,
	0x17, 0x35, 0xed, 0xf8, 0xef, 0x7e, 0x96, 0xed, 0x6f, 0xa0, 0xc4, 0x34, 0x1d, 0xc8, 0x09, 0xe3,
	0x26, 0x6e, 0xda, 0x48, 0xa9, 0xea, 0x34, 0x28, 0xd0, 0x24, 0xa8, 0x55, 0x3b, 0x2d, 0x10, 0x01,
	0x05, 0x63, 0xa7, 0xa8, 0x37, 0xc4, 0x98, 0x1c, 0x53, 0x84, 0xa5, 0x19, 0x96, 0x43, 0x55, 0x51,
	0x76, 0x05, 0xba, 0x0a, 0x50, 0x20, 0x40, 0x1f, 0xa0, 0xcf, 0xd0, 0xb7, 0xc8, 0x32, 0xcb, 0xa2,
	0x28, 0x82, 0xc2, 0xde, 0xf5, 0x29, 0x8a, 0x19, 0xfe, 0x84, 0x94, 0x44, 0x49, 0x56, 0xba, 0xb1,
	0x39, 0xa3, 0x7b, 0xce, 0x9c, 0xb9, 0x73, 0xef, 0x19, 0x12, 0xb6, 0x5e, 0x90, 0x00, 0x5b, 0x0d,
	0xec, 0xd2, 0x8a, 0x7c, 0x62, 0x3e, 0xa9, 0x9c, 0xb4, 0xa9, 0xe3, 0x1e, 0x37, 0x49, 0x25, 0x78,
	0x5e, 0xf6, 0x7c, 0x16, 0x30, 0xb4, 0x91, 0x44, 0x95, 0xe3, 0xa8, 0x72, 0x1c, 0xa5, 0x15, 0x1d,
	0xe6, 0x30, 0x19, 0x57, 0x11, 0x4f, 0x21, 0x44, 0xbb, 0x39, 0x80, 0xd8, 0x3b, 0x75, 0x2a, 0x16,
	0x73, 0xa9, 0xfc, 0x13, 0xc6, 0xe9, 0x3b, 0xa0, 0xd6, 0xb9, 0xf3, 0x15, 0xf1, 0x9a, 0xac, 0xfb,
	0xb4, 0xcb, 0x03, 0xd2, 0xaa, 0x31, 0x1a, 0xf8, 0xd8, 0x0a, 0x38, 0x52, 0x61, 0xde, 0xf2, 0x09,
	0x0e, 0x98, 0xaf, 0x2a, 0xd7, 0x94, 0xed, 0x45, 0x23, 0x1e, 0xea, 0x7f, 0x29, 0x70, 0x2d, 0x0f,
	0x66, 0x10, 0xee, 0x31, 0xca, 0x09, 0xba, 0x0d, 0xab, 0x6d, 0xea, 0xf2, 0x0e, 0xf6, 0x9e, 0x55,
	0xf7, 0xb1, 0x15, 0x30, 0xbf, 0x1b, 0xf1, 0xf4, 0xcd, 0xa3, 0x22, 0xcc, 0x76, 0x84, 0x4e, 0x75,
	0x5a, 0x06, 0x84, 0x03, 0xb4, 0x0d, 0x2b, 0x49, 0xa4, 0xc1, 0xda, 0x01, 0xf1, 0xd5, 0x19, 0xf9,
	0x7b, 0xef, 0x34, 0xda, 0x82, 0x82, 0xc5, 0x28, 0x25, 0x82, 0xed, 0x68, 0xef, 0x59, 0x5d, 0xbd,
	0x24, 0xe3, 0xb2, 0x93, 0xe8, 0x26, 0x2c, 0xf3, 0x8c, 0x58, 0x75, 0x56, 0x86, 0xf5, 0xcc, 0xea,
	0x2f, 0xa7, 0x61, 0xbd, 0xce, 0x9d, 0x43, 0xcf, 0xc6, 0x01, 0x39, 0x32, 0x6a, 0xd5, 0xbb, 0xdf,
	0xb9, 0x41, 0xc3, 0xf6, 0x71, 0x67, 0x9f, 0x90, 0xfc, 0xb4, 0xa0, 0x1b, 0x50, 0x78, 0xe1, 0x5b,
	0xd5, 0xbb, 0x26, 0xb6, 0x6d, 0x9f, 0x70, 0x1e, 0xed, 0x66, 0x49, 0x4e, 0x7e, 0x19, 0xce, 0xa1,
	0xef, 0x61, 0x95, 0x92, 0x8e, 0xd9, 0x89, 0x18, 0xcd, 0x13, 0x42, 0xd4, 0x39, 0x11, 0xb7, 0x5b,
	0x79, 0xfd, 0x76, 0x73, 0xea, 0xcf, 0xb7, 0x9b, 0xb7, 0x1c, 0x37, 0x68, 0xb4, 0x8f, 0xcb, 0x16,
	0x6b, 0x55, 0x2c, 0xc6, 0x5b, 0x8c, 0x47, 0xff, 0xee, 0x70, 0xfb, 0xb4, 0x12, 0x74, 0x3d, 0xc2,
	0xcb, 0x87, 0x2e, 0x0d, 0x8c, 0x65, 0x4a, 0x3a, 0x69, 0x65, 0x4f, 0xa1, 0x20, 0xa8, 0x1d, 0xcc,
	0xcd, 0xa6, 0xdb, 0x72, 0x03, 0x75, 0x7e, 0x32, 0xde, 0xff, 0x51, 0xd2, 0x79, 0x8c, 0xf9, 0x13,
	0xc1, 0xa1, 0xdf, 0x80, 0xeb, 0xb9, 0xb9, 0x88, 0xcf, 0x5a, 0xf7, 0x61, 0x2d, 0x09, 0xca, 0xd6,
	0xc3, 0x90, 0x74, 0x3d, 0x80, 0x0d, 0x21, 0x37, 0x4c, 0xbe, 0x69, 0x45, 0x80, 0x9e, 0xe4, 0xa9,
	0x94, 0x74, 0xb2, 0x8c, 0x51, 0x22, 0xf5, 0xeb, 0xb0, 0x99, 0xb3, 0x66, 0x22, 0xeb, 0xb7, 0x69,
	0xd0, 0x92, 0x3a, 0xdd, 0x8f, 0x3a, 0xa6, 0xc6, 0x5c, 0x2a, 0x37, 0x32, 0x44, 0x5a, 0x11, 0x66,
	0xf7, 0x44, 0x48, 0x5c, 0x8f, 0x72, 0x80, 0xb6, 0x61, 0xf5, 0x84, 0xf9, 0xc4, 0x75, 0xa8, 0x29,
	0x5b, 0xcb, 0x74, 0x6d, 0x59, 0x90, 0x33, 0xc6, 0x72, 0x34, 0x5f, 0x13, 0xd3, 0xdf, 0xd8, 0x48,
	0x83, 0x05, 0x9b, 0x58, 0x6e, 0x0b, 0x37, 0xb9, 0x2c, 0xc5, 0x82, 0x91, 0x8c, 0x11, 0x82, 0x4b,
	0x14, 0xb7, 0x48, 0x54, 0x7b, 0xf2, 0x19, 0x5d, 0x81, 0x39, 0xde, 0x6d, 0x1d, 0xb3, 0x66, 0x58,
	0x0a, 0x46, 0x34, 0x42, 0xbb, 0xb0, 0x28, 0x9a, 0xd5, 0x14, 0x87, 0x23, 0x4f, 0x73, 0xb9, 0xfa,
	0x41, 0x79, 0x80, 0x1b, 0x78, 0xa7, 0x4e, 0x59, 0x76, 0xb5, 0xd8, 0xdc, 0x41, 0xd7, 0x23, 0xc6,
	0x82, 0x15, 0x3d, 0xa1, 0x0d, 0x58, 0x7c, 0x57, 0x11, 0x0b, 0x52, 0xee, 0x82, 0x13, 0x9f, 0xee,
	0x43, 0xd0, 0xf3, 0x13, 0x94, 0xb4, 0xb2, 0x0a, 0xf3, 0xf1, 0xa9, 0x44, 0x89, 0x8a, 0x86, 0xfa,
	0x21, 0x14, 0xeb, 0xdc, 0x31, 0x48, 0x8b, 0xfd, 0x48, 0xf6, 0xa3, 0x1c, 0x30, 0x97, 0xbe, 0x67,
	0x93, 0xe8, 0x25, 0xb8, 0x3a, 0x88, 0x36, 0x39, 0xd8, 0x9f, 0x95, 0x54, 0x87, 0xc6, 0xc7, 0xbe,
	0xdb, 0x0d, 0x88, 0xc5, 0xec, 0x61, 0x1d, 0xfa, 0x21, 0xac, 0xe6, 0xd4, 0xd9, 0x8a, 0x95, 0x2d,
	0x2f, 0xa4, 0x87, 0xcd, 0x24, 0x08, 0xcd, 0x06, 0xe6, 0x8d, 0xc8, 0x7a, 0x44, 0x6f, 0xd4, 0x98,
	0x4d, 0xbe, 0xc6, 0xbc, 0x91, 0xe9, 0x8d, 0x5e, 0x15, 0x89, 0xd6, 0xdf, 0x15, 0x59, 0x84, 0xa9,
	0x0e, 0x7a, 0xe2, 0xfe, 0xd0, 0x76, 0x6d, 0x37, 0xe8, 0xd6, 0xb0, 0xf7, 0xbe, 0x76, 0x72, 0x00,
	0x85, 0x66, 0x4c, 0x67, 0x5a, 0xd8, 0x0b, 0x65, 0x5e, 0xbc, 0xe7, 0x97, 0x9a, 0x29, 0x51, 0xfa,
	0x96, 0x2c, 0x8b, 0x1c, 0xc9, 0xc9, 0xce, 0x0c, 0x28, 0xd4, 0xb9, 0xf3, 0x2d, 0x6e, 0x73, 0x32,
	0xaa, 0xa1, 0x6e, 0xc1, 0x4a, 0x66, 0x2f, 0x44, 0xec, 0x66, 0x46, 0x78, 0x6f, 0x7a, 0x37, 0x84,
	0xeb, 0x6b, 0x70, 0x39, 0xc3, 0x99, 0x2c, 0x76, 0x00, 0x2b, 0x42, 0x12, 0xf5, 0xfe, 0xd3, 0xe5,
	0xd6, 0x43, 0xe3, 0x4a, 0xb1, 0x26, 0x0b, 0xb6, 0xe5, 0xd5, 0x18, 0xe6, 0xe0, 0x31, 0x0e, 0x48,
	0x07, 0x77, 0xc7, 0x30, 0xb5, 0x47, 0x70, 0x35, 0xf4, 0x60, 0x09, 0xc8, 0x73, 0xb5, 0x75, 0xe9,
	0xb0, 0x19, 0xce, 0xb8, 0xf4, 0x75, 0x79, 0xb5, 0x0e, 0x5c, 0x36, 0x96, 0x56, 0xfd, 0x07, 0x60,
	0xa6, 0xce, 0x1d, 0xf4, 0x8b, 0x02, 0x97, 0x07, 0xdf, 0xdd, 0xf7, 0xca, 0x43, 0xde, 0x19, 0xca,
	0x79, 0x77, 0xb7, 0xf6, 0x60, 0x22, 0x58, 0xe2, 0x13, 0xbf, 0x2a, 0xb0, 0x96, 0x67, 0xb6, 0xf7,
	0xc7, 0xa3, 0xee, 0x03, 0x6a, 0x8f, 0x26, 0x04, 0x26, 0xaa, 0x7e, 0x52, 0xe0, 0xff, 0xfd, 0x0e,
	0xf5, 0xc9, 0x28, 0xda, 0x3e, 0x88, 0xf6, 0xf9, 0x85, 0x21, 0x89, 0x86, 0x97, 0x0a, 0x14, 0x07,
	0x5e, 0x8f, 0x3b, 0xa3, 0x38, 0x07, 0xa1, 0xb4, 0x2f, 0x26, 0x41, 0x25, 0x62, 0x5e, 0x29, 0x70,
	0x25, 0xc7, 0x3a, 0x3f, 0x1b, 0x8f, 0xb8, 0x17, 0xa7, 0x3d, 0x9c, 0x0c, 0x37, 0x40, 0x52, 0xdf,
	0xfb, 0xd6, 0x98, 0x92, 0x7a, 0x71, 0xe3, 0x4a, 0xca, 0x7b, 0xa7, 0x91, 0xc5, 0x9c, 0x67, 0xda,
	0xf7, 0x2f, 0xc0, 0x9d, 0x06, 0x8e, 0x2e, 0xe6, 0x11, 0x9e, 0x8b, 0x9a, 0x00, 0x29, 0xc3, 0xbd,
	0x3d, 0x8a, 0xee, 0x5d, 0xac, 0x56, 0x1d, 0x3f, 0x36, 0x59, 0xcd, 0x87, 0xa5, 0x8c, 0xe3, 0x7e,
	0x3c, 0x52, 0x7e, 0x2a, 0x5a, 0xdb, 0xb9, 0x48, 0x74, 0xb2, 0xa6, 0x30, 0xb5, 0xc1, 0xae, 0x7b,
	0x6f, 0xbc, 0xe4, 0xf5, 0xc0, 0x46, 0x9b, 0xda, 0x50, 0xb3, 0xdd, 0xdd, 0x7b, 0x7d, 0x56, 0x52,
	0xde, 0x9c, 0x95, 0x94, 0xbf, 0xcf, 0x4a, 0xca, 0xab, 0xf3, 0xd2, 0xd4, 0x9b, 0xf3, 0xd2, 0xd4,
	0x1f, 0xe7, 0xa5, 0xa9, 0xa3, 0x8f, 0x52, 0x97, 0xab, 0x20, 0xbe, 0x13, 0x7e, 0x70, 0x51, 0x66,
	0x93, 0xca, 0xf3, 0xd4, 0x77, 0x9c, 0xb8, 0x65, 0x8f, 0xe7, 0xe4, 0x07, 0xd7, 0xa7, 0xff, 0x06,
	0x00, 0x00, 0xff, 0xff, 0x17, 0x9a, 0xd9, 0x4c, 0xf3, 0x0d, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	DeploySystemContracts(ctx context.Context, in *MsgDeploySystemContracts, opts ...grpc.CallOption) (*MsgDeploySystemContractsResponse, error)
	DeployFungibleCoinZRC20(ctx context.Context, in *MsgDeployFungibleCoinZRC20, opts ...grpc.CallOption) (*MsgDeployFungibleCoinZRC20Response, error)
	RemoveForeignCoin(ctx context.Context, in *MsgRemoveForeignCoin, opts ...grpc.CallOption) (*MsgRemoveForeignCoinResponse, error)
	UpdateSystemContract(ctx context.Context, in *MsgUpdateSystemContract, opts ...grpc.CallOption) (*MsgUpdateSystemContractResponse, error)
	UpdateContractBytecode(ctx context.Context, in *MsgUpdateContractBytecode, opts ...grpc.CallOption) (*MsgUpdateContractBytecodeResponse, error)
	UpdateZRC20WithdrawFee(ctx context.Context, in *MsgUpdateZRC20WithdrawFee, opts ...grpc.CallOption) (*MsgUpdateZRC20WithdrawFeeResponse, error)
	UpdateZRC20LiquidityCap(ctx context.Context, in *MsgUpdateZRC20LiquidityCap, opts ...grpc.CallOption) (*MsgUpdateZRC20LiquidityCapResponse, error)
	PauseZRC20(ctx context.Context, in *MsgPauseZRC20, opts ...grpc.CallOption) (*MsgPauseZRC20Response, error)
	UnpauseZRC20(ctx context.Context, in *MsgUnpauseZRC20, opts ...grpc.CallOption) (*MsgUnpauseZRC20Response, error)
	UpdateGatewayContract(ctx context.Context, in *MsgUpdateGatewayContract, opts ...grpc.CallOption) (*MsgUpdateGatewayContractResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) DeploySystemContracts(ctx context.Context, in *MsgDeploySystemContracts, opts ...grpc.CallOption) (*MsgDeploySystemContractsResponse, error) {
	out := new(MsgDeploySystemContractsResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.fungible.Msg/DeploySystemContracts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeployFungibleCoinZRC20(ctx context.Context, in *MsgDeployFungibleCoinZRC20, opts ...grpc.CallOption) (*MsgDeployFungibleCoinZRC20Response, error) {
	out := new(MsgDeployFungibleCoinZRC20Response)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.fungible.Msg/DeployFungibleCoinZRC20", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RemoveForeignCoin(ctx context.Context, in *MsgRemoveForeignCoin, opts ...grpc.CallOption) (*MsgRemoveForeignCoinResponse, error) {
	out := new(MsgRemoveForeignCoinResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.fungible.Msg/RemoveForeignCoin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateSystemContract(ctx context.Context, in *MsgUpdateSystemContract, opts ...grpc.CallOption) (*MsgUpdateSystemContractResponse, error) {
	out := new(MsgUpdateSystemContractResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.fungible.Msg/UpdateSystemContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateContractBytecode(ctx context.Context, in *MsgUpdateContractBytecode, opts ...grpc.CallOption) (*MsgUpdateContractBytecodeResponse, error) {
	out := new(MsgUpdateContractBytecodeResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.fungible.Msg/UpdateContractBytecode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateZRC20WithdrawFee(ctx context.Context, in *MsgUpdateZRC20WithdrawFee, opts ...grpc.CallOption) (*MsgUpdateZRC20WithdrawFeeResponse, error) {
	out := new(MsgUpdateZRC20WithdrawFeeResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.fungible.Msg/UpdateZRC20WithdrawFee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateZRC20LiquidityCap(ctx context.Context, in *MsgUpdateZRC20LiquidityCap, opts ...grpc.CallOption) (*MsgUpdateZRC20LiquidityCapResponse, error) {
	out := new(MsgUpdateZRC20LiquidityCapResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.fungible.Msg/UpdateZRC20LiquidityCap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) PauseZRC20(ctx context.Context, in *MsgPauseZRC20, opts ...grpc.CallOption) (*MsgPauseZRC20Response, error) {
	out := new(MsgPauseZRC20Response)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.fungible.Msg/PauseZRC20", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UnpauseZRC20(ctx context.Context, in *MsgUnpauseZRC20, opts ...grpc.CallOption) (*MsgUnpauseZRC20Response, error) {
	out := new(MsgUnpauseZRC20Response)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.fungible.Msg/UnpauseZRC20", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateGatewayContract(ctx context.Context, in *MsgUpdateGatewayContract, opts ...grpc.CallOption) (*MsgUpdateGatewayContractResponse, error) {
	out := new(MsgUpdateGatewayContractResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.fungible.Msg/UpdateGatewayContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	DeploySystemContracts(context.Context, *MsgDeploySystemContracts) (*MsgDeploySystemContractsResponse, error)
	DeployFungibleCoinZRC20(context.Context, *MsgDeployFungibleCoinZRC20) (*MsgDeployFungibleCoinZRC20Response, error)
	RemoveForeignCoin(context.Context, *MsgRemoveForeignCoin) (*MsgRemoveForeignCoinResponse, error)
	UpdateSystemContract(context.Context, *MsgUpdateSystemContract) (*MsgUpdateSystemContractResponse, error)
	UpdateContractBytecode(context.Context, *MsgUpdateContractBytecode) (*MsgUpdateContractBytecodeResponse, error)
	UpdateZRC20WithdrawFee(context.Context, *MsgUpdateZRC20WithdrawFee) (*MsgUpdateZRC20WithdrawFeeResponse, error)
	UpdateZRC20LiquidityCap(context.Context, *MsgUpdateZRC20LiquidityCap) (*MsgUpdateZRC20LiquidityCapResponse, error)
	PauseZRC20(context.Context, *MsgPauseZRC20) (*MsgPauseZRC20Response, error)
	UnpauseZRC20(context.Context, *MsgUnpauseZRC20) (*MsgUnpauseZRC20Response, error)
	UpdateGatewayContract(context.Context, *MsgUpdateGatewayContract) (*MsgUpdateGatewayContractResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) DeploySystemContracts(ctx context.Context, req *MsgDeploySystemContracts) (*MsgDeploySystemContractsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeploySystemContracts not implemented")
}
func (*UnimplementedMsgServer) DeployFungibleCoinZRC20(ctx context.Context, req *MsgDeployFungibleCoinZRC20) (*MsgDeployFungibleCoinZRC20Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeployFungibleCoinZRC20 not implemented")
}
func (*UnimplementedMsgServer) RemoveForeignCoin(ctx context.Context, req *MsgRemoveForeignCoin) (*MsgRemoveForeignCoinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveForeignCoin not implemented")
}
func (*UnimplementedMsgServer) UpdateSystemContract(ctx context.Context, req *MsgUpdateSystemContract) (*MsgUpdateSystemContractResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSystemContract not implemented")
}
func (*UnimplementedMsgServer) UpdateContractBytecode(ctx context.Context, req *MsgUpdateContractBytecode) (*MsgUpdateContractBytecodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateContractBytecode not implemented")
}
func (*UnimplementedMsgServer) UpdateZRC20WithdrawFee(ctx context.Context, req *MsgUpdateZRC20WithdrawFee) (*MsgUpdateZRC20WithdrawFeeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateZRC20WithdrawFee not implemented")
}
func (*UnimplementedMsgServer) UpdateZRC20LiquidityCap(ctx context.Context, req *MsgUpdateZRC20LiquidityCap) (*MsgUpdateZRC20LiquidityCapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateZRC20LiquidityCap not implemented")
}
func (*UnimplementedMsgServer) PauseZRC20(ctx context.Context, req *MsgPauseZRC20) (*MsgPauseZRC20Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PauseZRC20 not implemented")
}
func (*UnimplementedMsgServer) UnpauseZRC20(ctx context.Context, req *MsgUnpauseZRC20) (*MsgUnpauseZRC20Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnpauseZRC20 not implemented")
}
func (*UnimplementedMsgServer) UpdateGatewayContract(ctx context.Context, req *MsgUpdateGatewayContract) (*MsgUpdateGatewayContractResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGatewayContract not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_DeploySystemContracts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeploySystemContracts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeploySystemContracts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.fungible.Msg/DeploySystemContracts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeploySystemContracts(ctx, req.(*MsgDeploySystemContracts))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeployFungibleCoinZRC20_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeployFungibleCoinZRC20)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeployFungibleCoinZRC20(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.fungible.Msg/DeployFungibleCoinZRC20",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeployFungibleCoinZRC20(ctx, req.(*MsgDeployFungibleCoinZRC20))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RemoveForeignCoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRemoveForeignCoin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RemoveForeignCoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.fungible.Msg/RemoveForeignCoin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RemoveForeignCoin(ctx, req.(*MsgRemoveForeignCoin))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateSystemContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateSystemContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateSystemContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.fungible.Msg/UpdateSystemContract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateSystemContract(ctx, req.(*MsgUpdateSystemContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateContractBytecode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateContractBytecode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateContractBytecode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.fungible.Msg/UpdateContractBytecode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateContractBytecode(ctx, req.(*MsgUpdateContractBytecode))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateZRC20WithdrawFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateZRC20WithdrawFee)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateZRC20WithdrawFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.fungible.Msg/UpdateZRC20WithdrawFee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateZRC20WithdrawFee(ctx, req.(*MsgUpdateZRC20WithdrawFee))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateZRC20LiquidityCap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateZRC20LiquidityCap)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateZRC20LiquidityCap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.fungible.Msg/UpdateZRC20LiquidityCap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateZRC20LiquidityCap(ctx, req.(*MsgUpdateZRC20LiquidityCap))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_PauseZRC20_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgPauseZRC20)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).PauseZRC20(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.fungible.Msg/PauseZRC20",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).PauseZRC20(ctx, req.(*MsgPauseZRC20))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UnpauseZRC20_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUnpauseZRC20)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UnpauseZRC20(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.fungible.Msg/UnpauseZRC20",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UnpauseZRC20(ctx, req.(*MsgUnpauseZRC20))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateGatewayContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateGatewayContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateGatewayContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.fungible.Msg/UpdateGatewayContract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateGatewayContract(ctx, req.(*MsgUpdateGatewayContract))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "zetachain.zetacore.fungible.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeploySystemContracts",
			Handler:    _Msg_DeploySystemContracts_Handler,
		},
		{
			MethodName: "DeployFungibleCoinZRC20",
			Handler:    _Msg_DeployFungibleCoinZRC20_Handler,
		},
		{
			MethodName: "RemoveForeignCoin",
			Handler:    _Msg_RemoveForeignCoin_Handler,
		},
		{
			MethodName: "UpdateSystemContract",
			Handler:    _Msg_UpdateSystemContract_Handler,
		},
		{
			MethodName: "UpdateContractBytecode",
			Handler:    _Msg_UpdateContractBytecode_Handler,
		},
		{
			MethodName: "UpdateZRC20WithdrawFee",
			Handler:    _Msg_UpdateZRC20WithdrawFee_Handler,
		},
		{
			MethodName: "UpdateZRC20LiquidityCap",
			Handler:    _Msg_UpdateZRC20LiquidityCap_Handler,
		},
		{
			MethodName: "PauseZRC20",
			Handler:    _Msg_PauseZRC20_Handler,
		},
		{
			MethodName: "UnpauseZRC20",
			Handler:    _Msg_UnpauseZRC20_Handler,
		},
		{
			MethodName: "UpdateGatewayContract",
			Handler:    _Msg_UpdateGatewayContract_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "zetachain/zetacore/fungible/tx.proto",
}

func (m *MsgDeploySystemContracts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeploySystemContracts) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeploySystemContracts) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDeploySystemContractsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeploySystemContractsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeploySystemContractsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SystemContract) > 0 {
		i -= len(m.SystemContract)
		copy(dAtA[i:], m.SystemContract)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SystemContract)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ConnectorZEVM) > 0 {
		i -= len(m.ConnectorZEVM)
		copy(dAtA[i:], m.ConnectorZEVM)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ConnectorZEVM)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.UniswapV2Router) > 0 {
		i -= len(m.UniswapV2Router)
		copy(dAtA[i:], m.UniswapV2Router)
		i = encodeVarintTx(dAtA, i, uint64(len(m.UniswapV2Router)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Wzeta) > 0 {
		i -= len(m.Wzeta)
		copy(dAtA[i:], m.Wzeta)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Wzeta)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.UniswapV2Factory) > 0 {
		i -= len(m.UniswapV2Factory)
		copy(dAtA[i:], m.UniswapV2Factory)
		i = encodeVarintTx(dAtA, i, uint64(len(m.UniswapV2Factory)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateZRC20WithdrawFee) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateZRC20WithdrawFee) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateZRC20WithdrawFee) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.NewGasLimit.Size()
		i -= size
		if _, err := m.NewGasLimit.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size := m.NewWithdrawFee.Size()
		i -= size
		if _, err := m.NewWithdrawFee.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if len(m.Zrc20Address) > 0 {
		i -= len(m.Zrc20Address)
		copy(dAtA[i:], m.Zrc20Address)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Zrc20Address)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateZRC20WithdrawFeeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateZRC20WithdrawFeeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateZRC20WithdrawFeeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateSystemContract) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateSystemContract) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateSystemContract) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NewSystemContractAddress) > 0 {
		i -= len(m.NewSystemContractAddress)
		copy(dAtA[i:], m.NewSystemContractAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NewSystemContractAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateSystemContractResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateSystemContractResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateSystemContractResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgDeployFungibleCoinZRC20) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeployFungibleCoinZRC20) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeployFungibleCoinZRC20) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GasLimit != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.GasLimit))
		i--
		dAtA[i] = 0x40
	}
	if m.CoinType != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.CoinType))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Symbol) > 0 {
		i -= len(m.Symbol)
		copy(dAtA[i:], m.Symbol)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Symbol)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Decimals != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Decimals))
		i--
		dAtA[i] = 0x20
	}
	if m.ForeignChainId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ForeignChainId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ERC20) > 0 {
		i -= len(m.ERC20)
		copy(dAtA[i:], m.ERC20)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ERC20)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDeployFungibleCoinZRC20Response) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeployFungibleCoinZRC20Response) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeployFungibleCoinZRC20Response) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRemoveForeignCoin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRemoveForeignCoin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRemoveForeignCoin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Zrc20Address) > 0 {
		i -= len(m.Zrc20Address)
		copy(dAtA[i:], m.Zrc20Address)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Zrc20Address)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRemoveForeignCoinResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRemoveForeignCoinResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRemoveForeignCoinResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateContractBytecode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateContractBytecode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateContractBytecode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NewCodeHash) > 0 {
		i -= len(m.NewCodeHash)
		copy(dAtA[i:], m.NewCodeHash)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NewCodeHash)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ContractAddress) > 0 {
		i -= len(m.ContractAddress)
		copy(dAtA[i:], m.ContractAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ContractAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateContractBytecodeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateContractBytecodeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateContractBytecodeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateZRC20LiquidityCap) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateZRC20LiquidityCap) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateZRC20LiquidityCap) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.LiquidityCap.Size()
		i -= size
		if _, err := m.LiquidityCap.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Zrc20Address) > 0 {
		i -= len(m.Zrc20Address)
		copy(dAtA[i:], m.Zrc20Address)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Zrc20Address)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateZRC20LiquidityCapResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateZRC20LiquidityCapResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateZRC20LiquidityCapResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgPauseZRC20) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPauseZRC20) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPauseZRC20) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Zrc20Addresses) > 0 {
		for iNdEx := len(m.Zrc20Addresses) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Zrc20Addresses[iNdEx])
			copy(dAtA[i:], m.Zrc20Addresses[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Zrc20Addresses[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgPauseZRC20Response) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPauseZRC20Response) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPauseZRC20Response) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUnpauseZRC20) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUnpauseZRC20) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUnpauseZRC20) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Zrc20Addresses) > 0 {
		for iNdEx := len(m.Zrc20Addresses) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Zrc20Addresses[iNdEx])
			copy(dAtA[i:], m.Zrc20Addresses[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Zrc20Addresses[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUnpauseZRC20Response) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUnpauseZRC20Response) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUnpauseZRC20Response) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateGatewayContract) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateGatewayContract) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateGatewayContract) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NewGatewayContractAddress) > 0 {
		i -= len(m.NewGatewayContractAddress)
		copy(dAtA[i:], m.NewGatewayContractAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NewGatewayContractAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateGatewayContractResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateGatewayContractResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateGatewayContractResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgDeploySystemContracts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgDeploySystemContractsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UniswapV2Factory)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Wzeta)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.UniswapV2Router)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ConnectorZEVM)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SystemContract)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateZRC20WithdrawFee) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Zrc20Address)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.NewWithdrawFee.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.NewGasLimit.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgUpdateZRC20WithdrawFeeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateSystemContract) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.NewSystemContractAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateSystemContractResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgDeployFungibleCoinZRC20) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ERC20)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ForeignChainId != 0 {
		n += 1 + sovTx(uint64(m.ForeignChainId))
	}
	if m.Decimals != 0 {
		n += 1 + sovTx(uint64(m.Decimals))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Symbol)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.CoinType != 0 {
		n += 1 + sovTx(uint64(m.CoinType))
	}
	if m.GasLimit != 0 {
		n += 1 + sovTx(uint64(m.GasLimit))
	}
	return n
}

func (m *MsgDeployFungibleCoinZRC20Response) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRemoveForeignCoin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Zrc20Address)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRemoveForeignCoinResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateContractBytecode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ContractAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.NewCodeHash)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateContractBytecodeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateZRC20LiquidityCap) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Zrc20Address)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.LiquidityCap.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgUpdateZRC20LiquidityCapResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgPauseZRC20) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Zrc20Addresses) > 0 {
		for _, s := range m.Zrc20Addresses {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgPauseZRC20Response) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUnpauseZRC20) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Zrc20Addresses) > 0 {
		for _, s := range m.Zrc20Addresses {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgUnpauseZRC20Response) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateGatewayContract) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.NewGatewayContractAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateGatewayContractResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgDeploySystemContracts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeploySystemContracts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeploySystemContracts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeploySystemContractsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeploySystemContractsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeploySystemContractsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniswapV2Factory", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UniswapV2Factory = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wzeta", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Wzeta = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniswapV2Router", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UniswapV2Router = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectorZEVM", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectorZEVM = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemContract", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SystemContract = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateZRC20WithdrawFee) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateZRC20WithdrawFee: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateZRC20WithdrawFee: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Zrc20Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Zrc20Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewWithdrawFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NewWithdrawFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewGasLimit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NewGasLimit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateZRC20WithdrawFeeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateZRC20WithdrawFeeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateZRC20WithdrawFeeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateSystemContract) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateSystemContract: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateSystemContract: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewSystemContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewSystemContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateSystemContractResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateSystemContractResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateSystemContractResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeployFungibleCoinZRC20) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeployFungibleCoinZRC20: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeployFungibleCoinZRC20: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ERC20", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ERC20 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForeignChainId", wireType)
			}
			m.ForeignChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ForeignChainId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Decimals", wireType)
			}
			m.Decimals = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Decimals |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Symbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Symbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinType", wireType)
			}
			m.CoinType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CoinType |= coin.CoinType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasLimit", wireType)
			}
			m.GasLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GasLimit |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeployFungibleCoinZRC20Response) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeployFungibleCoinZRC20Response: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeployFungibleCoinZRC20Response: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRemoveForeignCoin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRemoveForeignCoin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRemoveForeignCoin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Zrc20Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Zrc20Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRemoveForeignCoinResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRemoveForeignCoinResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRemoveForeignCoinResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateContractBytecode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateContractBytecode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateContractBytecode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewCodeHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewCodeHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateContractBytecodeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateContractBytecodeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateContractBytecodeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateZRC20LiquidityCap) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateZRC20LiquidityCap: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateZRC20LiquidityCap: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Zrc20Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Zrc20Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidityCap", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LiquidityCap.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateZRC20LiquidityCapResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateZRC20LiquidityCapResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateZRC20LiquidityCapResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPauseZRC20) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPauseZRC20: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPauseZRC20: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Zrc20Addresses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Zrc20Addresses = append(m.Zrc20Addresses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPauseZRC20Response) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPauseZRC20Response: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPauseZRC20Response: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUnpauseZRC20) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUnpauseZRC20: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUnpauseZRC20: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Zrc20Addresses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Zrc20Addresses = append(m.Zrc20Addresses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUnpauseZRC20Response) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUnpauseZRC20Response: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUnpauseZRC20Response: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateGatewayContract) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateGatewayContract: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateGatewayContract: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewGatewayContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewGatewayContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateGatewayContractResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateGatewayContractResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateGatewayContractResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
