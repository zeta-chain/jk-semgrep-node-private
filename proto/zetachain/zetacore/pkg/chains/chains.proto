syntax = "proto3";
package zetachain.zetacore.pkg.chains;

import "gogoproto/gogo.proto";

option go_package = "github.com/zeta-chain/node/pkg/chains";

// ReceiveStatus represents the status of an outbound
// TODO: Rename and move
// https://github.com/zeta-chain/node/issues/2257
enum ReceiveStatus {
  option (gogoproto.goproto_enum_stringer) = true;

  // Created is used for inbounds
  created = 0;
  success = 1;
  failed = 2;
}

// ChainName represents the name of the chain
// Deprecated(v19): replaced with Chain.Name as string
enum ChainName {
  option (gogoproto.goproto_enum_stringer) = true;
  empty = 0;

  eth_mainnet = 1;
  zeta_mainnet = 2;
  btc_mainnet = 3;
  polygon_mainnet = 4;
  bsc_mainnet = 5;

  goerli_testnet = 6;
  mumbai_testnet = 7;
  bsc_testnet = 10;
  zeta_testnet = 11;
  btc_testnet = 12;
  sepolia_testnet = 13;

  goerli_localnet = 14;
  btc_regtest = 15;

  amoy_testnet = 16;
  optimism_mainnet = 17;
  optimism_sepolia = 18;
  base_mainnet = 19;
  base_sepolia = 20;

  solana_mainnet = 21;
  solana_devnet = 22;
  solana_localnet = 23;

  btc_signet_testnet = 24;
}

// Network represents the network of the chain
// there is a single instance of the network on mainnet
// then the network can have eventual testnets or devnets
enum Network {
  option (gogoproto.goproto_enum_stringer) = true;
  eth = 0;
  zeta = 1;
  btc = 2;
  polygon = 3;
  bsc = 4;
  optimism = 5;
  base = 6;
  solana = 7;
}

// NetworkType represents the network type of the chain
// Mainnet, Testnet, Privnet, Devnet
enum NetworkType {
  option (gogoproto.goproto_enum_stringer) = true;
  mainnet = 0;
  testnet = 1;
  privnet = 2;
  devnet = 3;
}

// Vm represents the virtual machine type of the chain to support smart
// contracts
enum Vm {
  option (gogoproto.goproto_enum_stringer) = true;
  no_vm = 0;
  evm = 1;
  svm = 2;
}

// Consensus represents the consensus algorithm used by the chain
// this can represent the consensus of a L1
// this can also represent the solution of a L2
enum Consensus {
  option (gogoproto.goproto_enum_stringer) = true;
  ethereum = 0;
  tendermint = 1;
  bitcoin = 2;
  op_stack = 3;
  solana_consensus = 4;
}

// CCTXGateway describes for the chain the gateway used to handle CCTX outbounds
enum CCTXGateway {
  option (gogoproto.goproto_enum_stringer) = true;

  // zevm is the internal CCTX gateway to process outbound on the ZEVM and read
  // inbound events from the ZEVM only used for ZetaChain chains
  zevm = 0;

  // observers is the CCTX gateway for chains relying on the observer set to
  // observe inbounds and TSS for outbounds
  observers = 1;
}

// Chain represents static data about a blockchain network
// it is identified by a unique chain ID
message Chain {
  // ChainId is the unique identifier of the chain
  int64 chain_id = 2;

  // ChainName is the name of the chain
  // Deprecated(v19): replaced with Name
  ChainName chain_name = 1 [ deprecated = true ];

  // Network is the network of the chain
  Network network = 3;

  // NetworkType is the network type of the chain: mainnet, testnet, etc..
  NetworkType network_type = 4;

  // Vm is the virtual machine used in the chain
  Vm vm = 5;

  // Consensus is the underlying consensus algorithm used by the chain
  Consensus consensus = 6;

  // IsExternal describe if the chain is ZetaChain or external
  bool is_external = 7;

  // CCTXGateway is the gateway used to handle CCTX outbounds
  CCTXGateway cctx_gateway = 8;

  // Name is the name of the chain
  string name = 9;
}
