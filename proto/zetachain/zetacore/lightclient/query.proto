syntax = "proto3";
package zetachain.zetacore.lightclient;

import "cosmos/base/query/v1beta1/pagination.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "zetachain/zetacore/lightclient/block_header_verification.proto";
import "zetachain/zetacore/lightclient/chain_state.proto";
import "zetachain/zetacore/pkg/proofs/proofs.proto";

option go_package = "github.com/zeta-chain/node/x/lightclient/types";

// Query defines the gRPC querier service.
service Query {
  rpc BlockHeaderAll(QueryAllBlockHeaderRequest)
      returns (QueryAllBlockHeaderResponse) {
    option (google.api.http).get = "/zeta-chain/lightclient/block_headers";
  }

  rpc BlockHeader(QueryGetBlockHeaderRequest)
      returns (QueryGetBlockHeaderResponse) {
    option (google.api.http).get =
        "/zeta-chain/lightclient/block_headers/{block_hash}";
  }

  rpc ChainStateAll(QueryAllChainStateRequest)
      returns (QueryAllChainStateResponse) {
    option (google.api.http).get = "/zeta-chain/lightclient/chain_state";
  }

  rpc ChainState(QueryGetChainStateRequest)
      returns (QueryGetChainStateResponse) {
    option (google.api.http).get =
        "/zeta-chain/lightclient/chain_state/{chain_id}";
  }

  rpc Prove(QueryProveRequest) returns (QueryProveResponse) {
    option (google.api.http).get = "/zeta-chain/lightclient/prove";
  }

  rpc HeaderSupportedChains(QueryHeaderSupportedChainsRequest)
      returns (QueryHeaderSupportedChainsResponse) {
    option (google.api.http).get =
        "/zeta-chain/lightclient/header_supported_chains";
  }

  rpc HeaderEnabledChains(QueryHeaderEnabledChainsRequest)
      returns (QueryHeaderEnabledChainsResponse) {
    option (google.api.http).get =
        "/zeta-chain/lightclient/header_enabled_chains";
  }
}

message QueryAllBlockHeaderRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllBlockHeaderResponse {
  repeated pkg.proofs.BlockHeader block_headers = 1
      [ (gogoproto.nullable) = false ];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetBlockHeaderRequest { bytes block_hash = 1; }

message QueryGetBlockHeaderResponse { pkg.proofs.BlockHeader block_header = 1; }

message QueryAllChainStateRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllChainStateResponse {
  repeated ChainState chain_state = 1 [ (gogoproto.nullable) = false ];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetChainStateRequest { int64 chain_id = 1; }

message QueryGetChainStateResponse { ChainState chain_state = 1; }

message QueryProveRequest {
  int64 chain_id = 1;
  string tx_hash = 2;
  pkg.proofs.Proof proof = 3;
  string block_hash = 4;
  int64 tx_index = 5;
}

message QueryProveResponse { bool valid = 1; }

message QueryHeaderSupportedChainsRequest {}

message QueryHeaderSupportedChainsResponse {
  repeated HeaderSupportedChain header_supported_chains = 1
      [ (gogoproto.nullable) = false ];
}

message QueryHeaderEnabledChainsRequest {}

message QueryHeaderEnabledChainsResponse {
  repeated HeaderSupportedChain header_enabled_chains = 1
      [ (gogoproto.nullable) = false ];
}
