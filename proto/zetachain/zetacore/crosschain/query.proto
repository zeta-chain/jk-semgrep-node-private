syntax = "proto3";
package zetachain.zetacore.crosschain;

import "cosmos/base/query/v1beta1/pagination.proto";
import "zetachain/zetacore/crosschain/cross_chain_tx.proto";
import "zetachain/zetacore/crosschain/gas_price.proto";
import "zetachain/zetacore/crosschain/inbound_hash_to_cctx.proto";
import "zetachain/zetacore/crosschain/inbound_tracker.proto";
import "zetachain/zetacore/crosschain/last_block_height.proto";
import "zetachain/zetacore/crosschain/outbound_tracker.proto";
import "zetachain/zetacore/crosschain/rate_limiter_flags.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";

option go_package = "github.com/zeta-chain/node/x/crosschain/types";

// Query defines the gRPC querier service.
service Query {
  // Queries a outbound tracker by index.
  rpc OutboundTracker(QueryGetOutboundTrackerRequest)
      returns (QueryGetOutboundTrackerResponse) {
    option (google.api.http).get =
        "/zeta-chain/crosschain/outboundTracker/{chainID}/{nonce}";
  }

  // Queries a list of OutboundTracker items.
  rpc OutboundTrackerAll(QueryAllOutboundTrackerRequest)
      returns (QueryAllOutboundTrackerResponse) {
    option (google.api.http).get = "/zeta-chain/crosschain/outboundTracker";
  }

  rpc OutboundTrackerAllByChain(QueryAllOutboundTrackerByChainRequest)
      returns (QueryAllOutboundTrackerByChainResponse) {
    option (google.api.http).get =
        "/zeta-chain/crosschain/outboundTrackerByChain/{chain}";
  }

  rpc InboundTrackerAllByChain(QueryAllInboundTrackerByChainRequest)
      returns (QueryAllInboundTrackerByChainResponse) {
    option (google.api.http).get =
        "/zeta-chain/crosschain/inboundTrackerByChain/{chain_id}";
  }
  rpc InboundTrackerAll(QueryAllInboundTrackersRequest)
      returns (QueryAllInboundTrackersResponse) {
    option (google.api.http).get = "/zeta-chain/crosschain/inboundTrackers";
  }

  rpc InboundTracker(QueryInboundTrackerRequest)
      returns (QueryInboundTrackerResponse) {
    option (google.api.http).get =
        "/zeta-chain/crosschain/inboundTracker/{chain_id}/{tx_hash}";
  }

  // Queries a InboundHashToCctx by index.
  rpc InboundHashToCctx(QueryGetInboundHashToCctxRequest)
      returns (QueryGetInboundHashToCctxResponse) {
    option (google.api.http).get =
        "/zeta-chain/crosschain/inboundHashToCctx/{inboundHash}";
  }

  // Queries a InboundHashToCctx data by index.
  rpc InboundHashToCctxData(QueryInboundHashToCctxDataRequest)
      returns (QueryInboundHashToCctxDataResponse) {
    option (google.api.http).get =
        "/zeta-chain/crosschain/inboundHashToCctxData/{inboundHash}";
  }

  // Queries a list of InboundHashToCctx items.
  rpc InboundHashToCctxAll(QueryAllInboundHashToCctxRequest)
      returns (QueryAllInboundHashToCctxResponse) {
    option (google.api.http).get = "/zeta-chain/crosschain/inboundHashToCctx";
  }

  // Queries a gasPrice by index.
  rpc GasPrice(QueryGetGasPriceRequest) returns (QueryGetGasPriceResponse) {
    option (google.api.http).get = "/zeta-chain/crosschain/gasPrice/{index}";
  }

  // Queries a list of gasPrice items.
  rpc GasPriceAll(QueryAllGasPriceRequest) returns (QueryAllGasPriceResponse) {
    option (google.api.http).get = "/zeta-chain/crosschain/gasPrice";
  }

  rpc ConvertGasToZeta(QueryConvertGasToZetaRequest)
      returns (QueryConvertGasToZetaResponse) {
    option (google.api.http).get = "/zeta-chain/crosschain/convertGasToZeta";
  }

  rpc ProtocolFee(QueryMessagePassingProtocolFeeRequest)
      returns (QueryMessagePassingProtocolFeeResponse) {
    option (google.api.http).get = "/zeta-chain/crosschain/protocolFee";
  }

  // Queries a lastBlockHeight by index.
  rpc LastBlockHeight(QueryGetLastBlockHeightRequest)
      returns (QueryGetLastBlockHeightResponse) {
    option (google.api.http).get =
        "/zeta-chain/crosschain/lastBlockHeight/{index}";
  }

  // Queries a list of lastBlockHeight items.
  rpc LastBlockHeightAll(QueryAllLastBlockHeightRequest)
      returns (QueryAllLastBlockHeightResponse) {
    option (google.api.http).get = "/zeta-chain/crosschain/lastBlockHeight";
  }
  // Queries a send by index.
  rpc Cctx(QueryGetCctxRequest) returns (QueryGetCctxResponse) {
    option (google.api.http).get = "/zeta-chain/crosschain/cctx/{index}";
  }

  // Queries a cctx by nonce.
  rpc CctxByNonce(QueryGetCctxByNonceRequest) returns (QueryGetCctxResponse) {
    option (google.api.http).get =
        "/zeta-chain/crosschain/cctx/{chainID}/{nonce}";
  }

  // Queries a list of cctx items.
  rpc CctxAll(QueryAllCctxRequest) returns (QueryAllCctxResponse) {
    option (google.api.http).get = "/zeta-chain/crosschain/cctx";
  }

  // Queries a list of pending cctxs.
  rpc ListPendingCctx(QueryListPendingCctxRequest)
      returns (QueryListPendingCctxResponse) {
    option (google.api.http).get = "/zeta-chain/crosschain/pendingCctx";
  }

  // Queries a list of pending cctxs within rate limit.
  rpc ListPendingCctxWithinRateLimit(QueryListPendingCctxWithinRateLimitRequest)
      returns (QueryListPendingCctxWithinRateLimitResponse) {
    option (google.api.http).get =
        "/zeta-chain/crosschain/pendingCctxWithinRateLimit";
  }

  rpc ZetaAccounting(QueryZetaAccountingRequest)
      returns (QueryZetaAccountingResponse) {
    option (google.api.http).get = "/zeta-chain/crosschain/zetaAccounting";
  }

  // Queries a list of lastMetaHeight items.
  rpc LastZetaHeight(QueryLastZetaHeightRequest)
      returns (QueryLastZetaHeightResponse) {
    option (google.api.http).get = "/zeta-chain/crosschain/lastZetaHeight";
  }

  // Queries the rate limiter flags
  rpc RateLimiterFlags(QueryRateLimiterFlagsRequest)
      returns (QueryRateLimiterFlagsResponse) {
    option (google.api.http).get = "/zeta-chain/crosschain/rateLimiterFlags";
  }

  // Queries the input data of rate limiter.
  rpc RateLimiterInput(QueryRateLimiterInputRequest)
      returns (QueryRateLimiterInputResponse) {
    option (google.api.http).get = "/zeta-chain/crosschain/rateLimiterInput";
  }

  // Deprecated(v17): the following queries are deprecated and will be removed
  // in v18 They are defined to maintain backward compatibility after inTx and
  // outTx renaming

  // Deprecated(v17): use OutboundTracker
  rpc OutTxTracker(QueryGetOutboundTrackerRequest)
      returns (QueryGetOutboundTrackerResponse) {
    option (google.api.http).get =
        "/zeta-chain/crosschain/outTxTracker/{chainID}/{nonce}";
  }

  // Deprecated(v17): use OutboundTrackerAll
  rpc OutTxTrackerAll(QueryAllOutboundTrackerRequest)
      returns (QueryAllOutboundTrackerResponse) {
    option (google.api.http).get = "/zeta-chain/crosschain/outTxTracker";
  }

  // Deprecated(v17): use OutboundTrackerAllByChain
  rpc OutTxTrackerAllByChain(QueryAllOutboundTrackerByChainRequest)
      returns (QueryAllOutboundTrackerByChainResponse) {
    option (google.api.http).get =
        "/zeta-chain/crosschain/outTxTrackerByChain/{chain}";
  }

  // Deprecated(v17): use InboundTrackerAllByChain
  rpc InTxTrackerAllByChain(QueryAllInboundTrackerByChainRequest)
      returns (QueryAllInboundTrackerByChainResponse) {
    option (google.api.http).get =
        "/zeta-chain/crosschain/inTxTrackerByChain/{chain_id}";
  }

  // Deprecated(v17): use InboundTrackerAll
  rpc InTxTrackerAll(QueryAllInboundTrackersRequest)
      returns (QueryAllInboundTrackersResponse) {
    option (google.api.http).get = "/zeta-chain/crosschain/inTxTracker";
  }

  // Deprecated(v17): use InboundHashToCctx
  rpc InTxHashToCctx(QueryGetInboundHashToCctxRequest)
      returns (QueryGetInboundHashToCctxResponse) {
    option (google.api.http).get =
        "/zeta-chain/crosschain/inTxHashToCctx/{inboundHash}";
  }

  // Deprecated(v17): use InboundHashToCctxData
  rpc InTxHashToCctxData(QueryInboundHashToCctxDataRequest)
      returns (QueryInboundHashToCctxDataResponse) {
    option (google.api.http).get =
        "/zeta-chain/crosschain/inTxHashToCctxData/{inboundHash}";
  }

  // Deprecated(v17): use InboundHashToCctxAll
  rpc InTxHashToCctxAll(QueryAllInboundHashToCctxRequest)
      returns (QueryAllInboundHashToCctxResponse) {
    option (google.api.http).get = "/zeta-chain/crosschain/inTxHashToCctx";
  }
}

message QueryZetaAccountingRequest {}

message QueryZetaAccountingResponse { string aborted_zeta_amount = 1; }

message QueryGetOutboundTrackerRequest {
  int64 chainID = 1;
  uint64 nonce = 2;
}

message QueryGetOutboundTrackerResponse {
  OutboundTracker outboundTracker = 1 [ (gogoproto.nullable) = false ];
}

message QueryAllOutboundTrackerRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllOutboundTrackerResponse {
  repeated OutboundTracker outboundTracker = 1 [ (gogoproto.nullable) = false ];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryAllOutboundTrackerByChainRequest {
  int64 chain = 1;
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

message QueryAllOutboundTrackerByChainResponse {
  repeated OutboundTracker outboundTracker = 1 [ (gogoproto.nullable) = false ];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryAllInboundTrackerByChainRequest {
  int64 chain_id = 1;
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

message QueryAllInboundTrackerByChainResponse {
  repeated InboundTracker inboundTracker = 1 [ (gogoproto.nullable) = false ];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryAllInboundTrackersRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllInboundTrackersResponse {
  repeated InboundTracker inboundTracker = 1 [ (gogoproto.nullable) = false ];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetInboundHashToCctxRequest { string inboundHash = 1; }

message QueryGetInboundHashToCctxResponse {
  InboundHashToCctx inboundHashToCctx = 1 [ (gogoproto.nullable) = false ];
}

message QueryInboundHashToCctxDataRequest { string inboundHash = 1; }

message QueryInboundHashToCctxDataResponse {
  repeated CrossChainTx CrossChainTxs = 1 [ (gogoproto.nullable) = false ];
}

message QueryAllInboundHashToCctxRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllInboundHashToCctxResponse {
  repeated InboundHashToCctx inboundHashToCctx = 1
      [ (gogoproto.nullable) = false ];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetGasPriceRequest { string index = 1; }

message QueryGetGasPriceResponse { GasPrice GasPrice = 1; }

message QueryAllGasPriceRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllGasPriceResponse {
  repeated GasPrice GasPrice = 1;
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetLastBlockHeightRequest { string index = 1; }

message QueryGetLastBlockHeightResponse { LastBlockHeight LastBlockHeight = 1; }

message QueryAllLastBlockHeightRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllLastBlockHeightResponse {
  repeated LastBlockHeight LastBlockHeight = 1;
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetCctxRequest { string index = 1; }

message QueryGetCctxByNonceRequest {
  int64 chainID = 1;
  uint64 nonce = 2;
}

message QueryGetCctxResponse { CrossChainTx CrossChainTx = 1; }

message QueryAllCctxRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllCctxResponse {
  repeated CrossChainTx CrossChainTx = 1;
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryListPendingCctxRequest {
  int64 chain_id = 1;
  uint32 limit = 2;
}

message QueryListPendingCctxResponse {
  repeated CrossChainTx CrossChainTx = 1;
  uint64 totalPending = 2;
}

message QueryRateLimiterInputRequest {
  uint32 limit = 1;
  int64 window = 2;
}

message QueryRateLimiterInputResponse {
  int64 height = 1;
  repeated CrossChainTx cctxs_missed = 2;
  repeated CrossChainTx cctxs_pending = 3;
  uint64 total_pending = 4;
  string past_cctxs_value = 5;
  string pending_cctxs_value = 6;
  int64 lowest_pending_cctx_height = 7;
}

message QueryListPendingCctxWithinRateLimitRequest { uint32 limit = 1; }

message QueryListPendingCctxWithinRateLimitResponse {
  repeated CrossChainTx cross_chain_tx = 1;
  uint64 total_pending = 2;
  int64 current_withdraw_window = 3;
  string current_withdraw_rate = 4;
  bool rate_limit_exceeded = 5;
}

message QueryLastZetaHeightRequest {}

message QueryLastZetaHeightResponse { int64 Height = 1; }

message QueryConvertGasToZetaRequest {
  int64 chainId = 1;
  string gasLimit = 2;
}

message QueryConvertGasToZetaResponse {
  string outboundGasInZeta = 1;
  string protocolFeeInZeta = 2;
  uint64 ZetaBlockHeight = 3;
}

message QueryMessagePassingProtocolFeeRequest {}

message QueryMessagePassingProtocolFeeResponse { string feeInZeta = 1; }

message QueryRateLimiterFlagsRequest {}

message QueryRateLimiterFlagsResponse {
  RateLimiterFlags rateLimiterFlags = 1 [ (gogoproto.nullable) = false ];
}

message QueryInboundTrackerRequest {
  int64 chain_id = 1;
  string tx_hash = 2;
}

message QueryInboundTrackerResponse {
  InboundTracker inbound_tracker = 1 [ (gogoproto.nullable) = false ];
}